#lang racket
(require "tda-commit.txt")
(require "tda-commit-list.txt")
;TDA: ZONA DE TRABAJO
;ESTRUCTURA BASE:
; ZONA DE TRABAJO + LISTA DE COMMITS
; (STRING          (COMMIT, COMMIT, COMMIT...))

;CONSTRUCTOR:

;CREATE_ZONE
;DESCRIPCION: CREA UNA LISTA QUE COINCIDA CON LA ESTRUCTURA DETERMINADA DE UNA ZONA (DE TRABAJO),
 ; CORRESPONDIENTE A UN STRING CON EL NOMBRE DE DICHO ELEMENTO Y UNA LISTA DE COMMITS.
;DOMINIO: STRING X LISTA DE COMMITS
;RECORRIDO: ZONA

(define create_zone (lambda (N Z) (list N Z)))

;PERTENENCIA:

;CREATE_ZONE
;DESCRIPCION: DETERMINA SI UN ELEMENTO ES UNA LISTA, FORMADA POR DOS ELEMENTOS, UN STRING Y UNA
 ; LISTA DE COMMITS, ANTES DE UNA LISTA VACIA.
;DOMINIO: ELEMENTO
;RECORRIDO: BOOLEANO

(define zone? (lambda (Z)
                (if (list? Z)
                  (if (and (commit_list? (cdr Z)) (string? (car Z)) (null? (cadr Z)))
                      #t
                      #f)
                  #f)))

;SELECTORES:

;GET_ZONE_NAME
;DESCRIPCION: EXTRAE EL PRIMER ELEMENTO DE LA ZONA DE TRABAJO QUE SE LE ENTREGA, CORRESPONDIENTE
 ; AL NOMBRE DE DICHA ZONA
;DOMINIO: ZONA
;RECORRIDO: STRING

(define get_zone_name (lambda (Z) (car Z)))

;GET_COMMIT_LIST
;DESCRIPCION: EXTRAE EL SEGUNDO ELEMENTO DE LA ZONA DE TRABAJO QUE SE LE ENTREGA, CORRESPONDIENTE
 ; A LA LISTA DE COMMITS DE DICHA ZONA
;DOMINIO: ZONA
;RECORRIDO: LISTA DE COMMITS

(define get_commit_list (lambda (Z) (cadr Z)))

;MODIFICADORES:

;COPY_COMMIT_LIST
;DESCRIPCION: EXTRAE LA LISTA DE UNA ZONA DADA Y LA ASOCIA A OTRA ZONA ENTREGADA, REEMPLAZANDO
 ; TODO LO QUE PREVIAMENTE HAYA EXISTIDO EN ESTA.
;DOMINIO: ZONA X ZONA
;RECORRIDO: ZONA

(define copy_commit_list (lambda (N1 N2) (cons N2 (get_commit_list N1))))

;DELETE-ZONE-COMMIT-LIST
;DESCRIPCION: ELIMINA LA LISTA DE UNA ZONA ENTREGADA, ASOCIANDOLA A UNA LISTA VACIA EN SU LUGAR
;DOMINIO: ZONA
;RECORRIDO: ZONA

(define delete-zone-commit-list (lambda (N) (list N null)))

(provide (all-defined-out))