#lang racket
(require "tda-commit.txt")
(require "tda-zone.txt")

;RECURSIVE_MODIFIED_COMMITS
;DESCRIPCION: RECORRE DOS LISTAS, Y CREA UNA TERCERA, CON TODOS LOS COMMITS DE LA PRIMERA QUE NO ESTÉN EN LA SEGUNDA,
 ; O AQUELLOS CUYO NOMBRE DE ARCHIVO COINCIDA, PERO NO ASÍ SU CONTENIDO.
;DOMINIO: LISTAS DE COMMITS
;RECORRIDO: LISTA DE COMMITS
;RECURSION NATURAL

(define recursive_modified_commits (lambda (L1 L2 L3 LF)
                                     (if (null? L1)
                                         LF
                                         (if (null? L2)
                                             (recursive_modified_commits (cdr L1) L3 L3 (cons (car L1) LF))
                                             (if (equal? (car L1) (car L2))
                                                 (recursive_modified_commits (cdr L1) L3 L3 LF)
                                                 (if  (and (equal? (get_commit_filename (car L1)) (get_commit_filename (car L2)))
                                                           (not (equal? (get_commit_content (car L1)) (get_commit_content (car L2)))))
                                                      (recursive_modified_commits (cdr L1) L3 L3 (cons (car L1) LF))                                             
                                                      (recursive_modified_commits L1 (cdr L2) L3 LF)))))))

;EXTRACT_MODIFIED_COMMITS
;DESCRIPCION: POR MEDIO DE DOS LISTAS, INVOCA LA FUNCION "RECURSIVE_MODIFIED_COMMITS", CON LOS PARAMETROS REQUERIDOS PARA QUE
 ; ESTA SEGUNDA PUEDA REALIZAR SU LABOR ESPERADA. UTILIZADA POSTERIORMENTE EN FUNCION "ADD"
;DOMINIO: LISTAS DE COMMITS
;RECORRIDO: LISTA DE COMMITS

(define extract_modified_commits (lambda (L1 L2) (recursive_modified_commits L1 L2 L2 '())))

;RECURSIVE_DELETE_MODIFIED_COMMITS
;DESCRIPCION: RECORRE DOS LISTA, Y COMPARA SUS CONTENIDOS, CREANDO UNA TERCERA LISTA CON AQUELLOS ELEMENTOS QUE EXISTAN EN LA SEGUNDA,
 ; SIN UN DUPLICADO DE NOMBRE EN LA PRIMERA
;DOMINIO: LISTAS DE COMMITS
;RECORRIDO: LISTA DE COMMITS

(define recursive_delete_modified_commits (lambda (L1 L2 L3 LF)
                                            (if (null? L1)
                                                LF
                                                (if (null? L2)
                                                    (recursive_delete_modified_commits L1 L2 L3 (cons (car L1) LF))
                                                    (if  (equal? (get_commit_filename (car L1)) (get_commit_filename (car L2)))
                                                         (recursive_delete_modified_commits (cdr L1) L3 L3 LF)                                          
                                                         (recursive_delete_modified_commits L1 (cdr L2) L3 LF))))))

;DELETE_MODIFIED_COMMITS
;DESCRIPCION: POR MEDIO DE DOS LISTAS, INVOCA LA FUNCION "RECURSIVE_DELETE_MODIFIED_COMMITS", CON LOS PARAMETROS REQUERIDOS PARA QUE
 ; ESTA SEGUNDA PUEDA REALIZAR SU LABOR ESPERADA.
;DOMINIO: LISTAS DE COMMITS
;RECORRIDO: LISTA DE COMMITS

(define delete_modified_commits (lambda (L1 L2) (recursive_delete_modified_commits L1 L2 L2 '())))

;RECURSIVE_UNIQUE_COMMITS
;DESCRIPCION: COMPARA LOS COMMITS DENTRO DE DOS LISTAS,Y DETERMINA AQUELLOS ELEMENTOS EN LA PRIMERA LISTA
 ; QUE NO TIENEN UNA COPIA IDENTICA EN LA SEGUNDA.
;DOMINIO: LISTAS DE COMMITS
;RECORRIDO: LISTA DE COMMITS
;RECURSION DE COLA

(define recursive_unique_commits (lambda (L1 L2 L3)
                                 (if (null? L1)
                                     '()
                                     (if (null? L2)
                                         (cons (car L1) (recursive_unique_commits (cdr L1) L3 L3))
                                         (if (equal? (car L1) (car L2))
                                             (recursive_unique_commits (cdr L1) L3 L3)
                                             (recursive_unique_commits L1 (cdr L2) L3))))))

;EXTRACT_UNIQUE_COMMITS
;DESCRIPCION: POR MEDIO DE DOS LISTAS, INVOCA LA FUNCION "RECURSIVE_UNIQUE_MODIFIED_COMMITS", CON LOS PARAMETROS REQUERIDOS PARA QUE
 ; ESTA SEGUNDA PUEDA REALIZAR SU LABOR ESPERADA. UTILIZADA POSTERIORMENTE EN FUNCION "PULL".
;DOMINIO: LISTAS DE COMMITS
;RECORRIDO: LISTA DE COMMITS

(define extract_unique_commits (lambda (L1 L2) (recursive_unique_commits L1 L2 L2)))


;MERGE_LISTS_COMMITS
;DESCRIPCION: POR MEDIO DE DOS LISTAS, CREA UNA UNICA LISTA NUEVA, QUE CONTENGA LOS ELEMENTOS DE AMBAS.
;DOMINIO: LISTAS DE COMMITS
;RECORRIDO: LISTA DE COMMITS
;RECURSION NATURAL

(define merge_lists_commits (lambda (L1 LC)
                              (if (null? LC)
                                  L1
                                  (merge_lists_commits (cons (car LC) L1) (cdr LC)))))

;RECURSIVE_ADD_MESSAGE_TO_COMMIT_LIST
;DESCRIPCION: POR MEDIO DE UNA LISTA AUXILIAR, MODIFICA EL MENSAJE DADO A CADA UNO DE LOS COMMITS DE UNA LISTA,
 ; CREANDO UNA NUEVA LISTA CON ESTOS COMMITS.
;DOMINIO: LISTAS DE COMMITS
;RECORRIDO: LISTA DE COMMITS
;RECURSION NATURAL.

(define recursive_add_message_to_commit_list (lambda (MSG L LAUX)
                                               (if (null? L)
                                                   LAUX
                                                   (recursive_add_message_to_commit_list MSG
                                                                                         (cdr L)
                                                                                         (cons ( modify_commit_message (car L) MSG) LAUX)))))

(define add_message_to_commits_list (lambda (MSG L) (recursive_add_message_to_commit_list MSG L '())))

;COMMIT->STRING
;DESCRIPCION: CREA UN STRING SIGNIFICATIVO CON EL CONTENIDO DE UN COMMIT ENTREGADO
;DOMINIO: COMMIT
;RECORRIDO: STRING

(define commit->string (lambda (C)
                         (string-append "NOMBRE DE ARCHIVO: " (get_commit_filename C) "\nCREADO POR: " (get_commit_creator C)
                                        "\nFECHA DE CREACION: " (get_commit_date C) "\nMENSAJE ASOCIADO: " (get_commit_message C)
                                        "\n\nCONTENIDO DEL ARCHIVO:\n\n" (get_commit_content C) "\n\n- - - - - - - - -\n")))

;LIST_OF_COMMITS->STRING
;DESCRIPCION: CREA UN STRING SIGNIFICATIVO CON EL CONTENIDO DE UNA LISTA DE COMMITS
;DOMINIO: LISTA DE COMMITS
;RECORRIDO: STRING
;RECURSION NATURAL

(define list_of_commits->string (lambda (L S_L)
                                  (if (null? L)
                                      S_L
                                      (list_of_commits->string (cdr L) (string-append S_L (commit->string (car L)))))))

;ZONE->STRING
;DESCRIPCION: CREA UN STRING SIGNIFICATIVO CON EL CONTENIDO DE UNA ZONA
;DOMINIO: ZONA
;RECORRIDO: STRING

(define zone->string (lambda (Z) (string-append "\n###" (get_zone_name Z) "###\n\n" (list_of_commits->string (get_commit_list Z) ""))))

;LIST_OF_COMMANDS->STRING
;DESCRIPCION: CREA UN STRING SIGNIFICATIVO CON EL CONTENIDO DE UNA LISTA DE COMANDOS
;DOMINIO: LISTA DE COMANDOS
;RECORRIDO: STRING
;RECURSION NATURAL

(define list_of_commands->string (lambda (K S_K)
                                  (if (null? K)
                                      (string-append S_K "\n- - - - - - - - -")
                                      (list_of_commands->string (cdr K) (string-append S_K (car K) "\n")))))

;FUNCIONAMIENTO INTERNO ADD-ALL

(provide (all-defined-out))