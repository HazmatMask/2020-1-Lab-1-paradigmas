#lang racket
(require "tda-commit.rkt")
(require "tda-zone.rkt")

;PULL+ADD

;DETERMINAR ARCHIVOS MODIFICADOS O NUEVOS

(define recursive_modified_commits (lambda (L1 L2 L3 LF)
                                     (if (null? L1)
                                         LF
                                         (if (null? L2)
                                             (recursive_modified_commits (cdr L1) L3 L3 (cons (car L1) LF))
                                             (if (equal? (car L1) (car L2))
                                                 (recursive_modified_commits (cdr L1) L3 L3 LF)
                                                 (if  (and (equal? (get_commit_filename (car L1)) (get_commit_filename (car L2)))
                                                           (not (equal? (get_commit_content (car L1)) (get_commit_content (car L2)))))
                                                      (recursive_modified_commits (cdr L1) L3 L3 (cons (car L1) LF))                                             
                                                      (recursive_modified_commits L1 (cdr L2) L3 LF)))))))

(define extract_modified_commits (lambda (L1 L2) (recursive_modified_commits L1 L2 L2 '())))

;ELIMINAR ELEMENTOS MODIFICADOS

(define recursive_delete_modified_commits (lambda (L1 L2 L3 LF)
                                            (if (null? L1)
                                                LF
                                                (if (null? L2)
                                                    (recursive_delete_modified_commits L1 L2 L3 (cons (car L1) LF))
                                                    (if  (equal? (get_commit_filename (car L1)) (get_commit_filename (car L2)))
                                                         (recursive_delete_modified_commits (cdr L1) L3 L3 LF)                                          
                                                         (recursive_delete_modified_commits L1 (cdr L2) L3 LF))))))

(define delete_modified_commits (lambda (L1 L2) (recursive_delete_modified_commits L1 L2 L2 '())))

;DETERMINAR ELEMENTOS UNICOS

(define recursive_unique_commits (lambda (L1 L2 L3)
                                 (if (null? L1)
                                     '()
                                     (if (null? L2)
                                         (cons (car L1) (recursive_unique_commits (cdr L1) L3 L3))
                                         (if (equal? (car L1) (car L2))
                                             (recursive_unique_commits (cdr L1) L3 L3)
                                             (recursive_unique_commits L1 (cdr L2) L3))))))

(define extract_unique_commits (lambda (L1 L2) (recursive_unique_commits L1 L2 L2)))


;MEZCLAR LISTAS

(define merge_lists_commits (lambda (L1 LC)
                              (if (null? (cdr LC))
                                  (cons (car LC) L1)
                                  (merge_lists_commits (cons (car LC) L1) (cdr LC)))))

(provide (all-defined-out))

;AGREGAR MENSAJE A LISTA DE COMMITS

(define recursive_add_message_to_commit_list (lambda (MSG L LAUX)
                                               (if (null? L)
                                                   LAUX
                                                   (recursive_add_message_to_commit_list MSG
                                                                                         (cdr L)
                                                                                         (cons ( modify_commit_message (car L) MSG) LAUX)))))

(define add_message_to_commits_list (lambda (MSG L) (recursive_add_message_to_commit_list MSG L '())))

;CREAR STRING DESDE COMMIT

(define commit->string (lambda (C)
                         (string-append "NOMBRE DE ARCHIVO: " (get_commit_filename C) "\nCREADO POR: " (get_commit_creator C)
                                        "\nFECHA DE CREACION: " (get_commit_date C) "\nMENSAJE ASOCIADO: " (get_commit_message C)
                                        "\n\nCONTENIDO DEL ARCHIVO:\n\n" (get_commit_content C) "\n\n- - - - - - - - -\n")))

;CREAR STRING DESDE LISTA DE ZONA

(define list_of_commits->string (lambda (L S_L)
                                  (if (null? L)
                                      S_L
                                      (list_of_commits->string (cdr L) (string-append S_L (commit->string (car L)))))))

;CREAR STRING DESDE ZONA

(define zone->string (lambda (Z) (string-append "\n###" (get_zone_name Z) "###\n\n" (list_of_commits->string (get_commit_list Z) ""))))

;CREAR STRING DESDE COMANDOS

(define list_of_commands->string (lambda (K S_K)
                                  (if (null? K)
                                      (string-append S_K "\n- - - - - - - - -")
                                      (list_of_commands->string (cdr K) (string-append S_K (car K) "\n")))))