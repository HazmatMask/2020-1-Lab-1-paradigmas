#lang racket
;TDA: ARCHIVO
;ESTRUCTURA BASE:
;  NOMBRE, CONTENIDO.
; (STRING, STRING)

;CONSTRUCTORES:

;CREATE_FILE
;DESCRIPCION: CREA UNA LISTA CON LA ESTRUCTURA ASOCIADA AL TDA ARCHIVO
;DOMINIO: STRING X STRING
;RECORRIDO: ARCHIVO

(define create_file (lambda (N F) (list N F)))

;PERTENENCIA:

;FILE?
;DESCRIPCION: DETERMINA SI UN ELEMENTO CUMPLE CON SER UNA LISTA, POSEER DOS STRINGS
 ; COMO COMPONENTES PREVIOS A UN ELEMENTO VACIO, CUMPLIENDO AS√ç CON LA ESTRUCTURA
 ; ASOCIADA AL TDA ARCHIVO
;DOMINIO: ELEMENTO
;RECORRIDO: BOOLEAN

(define file? (lambda (C)
                  (if (and
                       (list? C)
                       (string? (car C))
                       (string? (cadr C))
                       (null? (cddr C)))
                      #t
                      #f)))

;SELECTORES:

;GET_FILENAME
;DESCRIPCION: EXTRAE EL PRIMER ELEMENTO DE UN ARCHIVO, CORRESPONDIENTE
 ; AL NOMBRE DE ESTE.
;DOMINIO: COMMIT
;RECORRIDO: STRING

(define get_filename (lambda (C) (car C)))

;GET_CONTENT
;DESCRIPCION: EXTRAE EL SEGUNDO ELEMENTO DE UN ARCHIVO, CORRESPONDIENTE
 ; AL CONTENIDO DE ESTE.
;DOMINIO: COMMIT
;RECORRIDO: STRING

(define get_file_content (lambda (C) (cadr C)))

(provide (all-defined-out))