#lang racket
(require "tda-commit.txt")
(require "tda-file.txt")
;TDA: LISTA DE COMMIT
;ESTRUCTURA BASE:
; LISTA DE COMMITS
; (COMMIT, COMMIT, COMMIT...)

;PERTENENCIA:

;COMMIT_LIST?
;DESCRIPCION: DETERMINA SI UN ELEMENTO CORRESPONDE A UNA LISTA DE COMMITS
;DOMINIO: ELEMENTO
;RECORRIDO: BOOLEAN
;RECURSION NATURAL

(define commit_list? (lambda (L)
                       (if (list? L)
                           (if (null? L)
                               #t
                               (if (commit? (car L))
                                   (commit_list? (cdr L))
                                   #f))
                           #f)))

;SELECTORES:

;FIND_COMMIT_BY_CREATOR
;DESCRIPCION: CREA UNA NUEVA LISTA CON TODOS LOS ELEMENTOS CUYO CREADOR CORRESPONDA
 ; AL STRING INGRESADO
;DOMINIO: STRING X LISTA DE COMMITS
;RECORRIDO: LISTA DE COMMITS
;RECURSION DE COLA.

(define find_commit_by_creator (lambda (C L)                       
                              (if (null? L)
                                  L
                                  (if (equal? C (get_commit_creator (car L)))
                                      (cons (car L) (find_commit_by_creator C (cdr L)))
                                      (find_commit_by_creator C (cdr L))))))

;FIND_COMMIT_BY_DATE
;DESCRIPCION: CREA UNA NUEVA LISTA CON TODOS LOS ELEMENTOS CUYA FECHA DE CREACIÃ“N
 ; CORRESPONDA AL STRING INGRESADO
;DOMINIO: STRING X LISTA DE COMMITS
;RECORRIDO: LISTA DE COMMITS
;RECURSION DE COLA

(define find_commit_by_date (lambda (D L)                       
                              (if (null? L)
                                  L
                                  (if (equal? D (get_commit_date (car L)))
                                      (cons (car L) (find_commit_by_date D (cdr L)))
                                      (find_commit_by_date D (cdr L))))))

;FIND_COMMIT_BY_FILENAME
;DESCRIPCION: CREA UNA NUEVA LISTA CON TODOS LOS ELEMENTOS CUYO NOMBRE DE ARCHIVO
 ; CORRESPONDA AL STRING INGRESADO
;DOMINIO: STRING X LISTA DE COMMITS
;RECORRIDO: LISTA DE COMMITS
;RECURSION DE COLA

(define find_commit_by_filename (lambda (N L)                       
                              (if (null? L)
                                  L
                                  (if (equal? N (get_filename (get_commit_file (car L))))
                                      (cons (car L) (find_commit_by_filename N (cdr L)))
                                      (find_commit_by_filename N (cdr L))))))

;MODIFICADORES:

;ADD_COMMIT
;DESCRIPCION: AGREGA UN COMMIT A LA LISTA DE COMMITS, AMBOS INGRESADOS COMO ARGUMENTO.
;DOMINIO: COMMIT X LISTA DE COMMITS
;RECORRIDO: LISTA DE COMMITS

(define add_commit (lambda (C L) (cons C L)))

;DELETE_COMMIT
;DESCRIPCION: ELIMINA UN COMMIT DE UNA LISTA DE COMMITS, AMBOS INGRESADOS COMO ARGUMENTO
;DOMINIO: STRING X LISTA DE COMMITS
;RECORRIDO: LISTA DE COMMITS
;RECURSION DE COLA

(define delete_commit (lambda (C L)
                        (if (null? L)
                            L
                            (if (equal? C (car L))
                                (cdr L)
                                (cons (car L) (delete_commit C (cdr L)))))))


(provide (all-defined-out))