
#lang racket
(require "tda-file.txt")
;TDA: COMMIT
;ESTRUCTURA BASE:
;  NOMBRE, FECHA, ARCHIVO, MENSAJE.
; (STRING, STRING, ARCHIVO, STRING)

;CONSTRUCTORES:

;CREATE_COMMIT
;DESCRIPCION: CREA UNA LISTA QUE COINCIDA CON LA ESTRUCTURA BASE DEL TDA "COMMIT"
;DOMINIO: STRING X STRING X ARCHIVO X STRING
;RECORRIDO: COMMIT

(define create_commit (lambda (C D F M) (list C D F M)))

;PERTENENCIA:

;COMMIT?
;DESCRIPCION: DETERMINA SI UN ELEMENTO ES UNA LISTA, CON LA ESTRUCTURA DEL TDA "COMMIT"
 ; ES DECIR, SER UNA LISTA Y TENER 4 ELEMENTOS ANTES DE EL ELEMENTO NULO.
;DOMINIO: ELEMENTO
;RECORRIDO: BOOLEANO

(define commit? (lambda (C)
                  (if (and
                       (list? C)
                       (string? (car C))
                       (string? (cadr C))
                       ;(string? (caddr C))
                       (string? (cadddr C))
                       (null? (cddddr C)))
                      #t
                      #f)))

;SELECTORES:

;GET_COMMIT_CREATOR
;DESCRIPCION: EXTRAE EL PRIMER ELEMENTO DEL COMMIT, CORRESPONDIENTE AL NOMBRE DEL
 ; CREADOR DEL COMMIT
;DOMINIO: COMMIT
;RECORRIDO: STRING

(define get_commit_creator (lambda (C) (car C)))

;GET_COMMIT_DATE
;DESCRIPCION: EXTRAE EL SEGUNDO ELEMENTO DEL COMMIT, CORRESPONDIENTE A LA FECHA DE
 ; CREACIÓN DEL COMMIT
;DOMINIO: COMMIT
;RECORRIDO: STRING

(define get_commit_date (lambda (C) (cadr C)))

;GET_COMMIT_FILE
;DESCRIPCION: EXTRAE EL TERCER ELEMENTO DEL COMMIT, CORRESPONDIENTE AL ARCHIVO ASOCIADO
 ; A UN COMMIT
;DOMINIO: COMMIT
;RECORRIDO: ARCHIVO

(define get_commit_file (lambda (C) (caddr C)))

;GET_COMMIT_FILENAME
;DESCRIPCION: EXTRAE EL PRIMER ELEMENTO DEL ARCHIVO ASOCIADO A UN COMMIT, EL CUAL
 ; CORRESPONDE AL NOMBRE DE DICHO ARCHIVO 
;DOMINIO: COMMIT
;RECORRIDO: STRING

(define get_commit_filename (lambda (C) (get_filename (get_commit_file C))))

;GET_COMMIT_CONTENT
;DESCRIPCION: EXTRAE EL SEGUNDO ELEMENTO DEL ARCHIVO ASOCIADO A UN COMMIT, EL CUAL
 ; CORRESPONDE AL CONTENIDO DE DICHO ARCHIVO 
;DOMINIO: COMMIT
;RECORRIDO: STRING

(define get_commit_content (lambda (C) (get_file_content (get_commit_file C))))

;GET_COMMIT_CONTENT
;DESCRIPCION: EXTRAE EL CUARTO ELEMENTO ASOCIADO A UN COMMIT, EL CUAL
 ; CORRESPONDE AL MENSAJE ASOCIADO A ESTE.
;DOMINIO: COMMIT
;RECORRIDO: STRING

(define get_commit_message (lambda (C) (cadddr C)))

;MODIFICADORES:

;MODIFY_COMMIT_MESSAGE
;DESCRIPCION: CREA UN NUEVO COMMIT, CON DATOS IDÉNTICOS AL ORIGINAL, EXCEPTO EL
 ; MENSAJE, EL CUAL SE REEMPLAZA POR EL STRING INGRESADO A LA FUNCIÓN
;DOMINIO: COMMIT X STRING
;RECORRIDO: COMMIT

(define modify_commit_message (lambda (C MSG)
                                (create_commit
                                 (get_commit_creator C)
                                 (get_commit_date C)
                                 (get_commit_file C)
                                 MSG)))

(provide (all-defined-out))